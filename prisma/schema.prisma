generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String       @id @default(cuid())
  name        String
  url         String
  domain      String?
  sitemapUrl  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  backlinks   Backlink[]
  keywords    Keyword[]
  keywordGroups KeywordGroup[]
  userId      String
  user        User        @relation(fields: [userId], references: [id])
}

model Backlink {
  id             String           @id @default(cuid())
  url            String
  targetUrl      String
  anchorText     String
  domainAuthority Float          @default(0)
  type          BacklinkType     @default(DOFOLLOW)
  status        BacklinkStatus   @default(ACTIVE)
  firstSeen     DateTime         @default(now())
  lastChecked   DateTime?
  projectId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  authority     Float            @default(0)
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  history       BacklinkHistory[]
}

model BacklinkHistory {
  id             String         @id @default(cuid())
  backlinkId     String
  status         BacklinkStatus @default(ACTIVE)
  domainAuthority Float         @default(0)
  checkedAt      DateTime       @default(now())
  backlink       Backlink       @relation(fields: [backlinkId], references: [id], onDelete: Cascade)
}

model Keyword {
  id           String         @id @default(cuid())
  keyword      String
  intent       KeywordIntent  @default(INFORMATIONAL)
  searchVolume Float         @default(0)
  difficulty   Float         @default(0)
  competition  Float         @default(0)
  cpc          Float         @default(0)
  currentRank  Float?
  density      Float?
  priority     Float?
  notes        String?
  lastChecked  DateTime?
  projectId    String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  groups       KeywordGroup[]
  history      KeywordHistory[]

  @@unique([projectId, keyword])
}

model KeywordHistory {
  id          String    @id @default(cuid())
  keywordId   String
  position    Float
  checkedAt   DateTime  @default(now())
  keyword     Keyword   @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model KeywordGroup {
  id          String    @id @default(cuid())
  name        String
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keywords    Keyword[]
}

enum KeywordIntent {
  INFORMATIONAL
  NAVIGATIONAL
  TRANSACTIONAL
}

enum BacklinkType {
  DOFOLLOW
  NOFOLLOW
  UGC
  SPONSORED
}

enum BacklinkStatus {
  ACTIVE
  LOST
  BROKEN
}

// Auth Models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
