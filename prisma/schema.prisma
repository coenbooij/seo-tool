// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id               Int               @id @default(autoincrement())
  name             String
  domain           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           Int
  user             User             @relation(fields: [userId], references: [id])
  keywords         Keyword[]
  keywordGroups    KeywordGroup[]
  competitors      Competitor[]
}

model Keyword {
  id              Int           @id @default(autoincrement())
  keyword         String
  searchVolume    Int?         // Monthly search volume
  difficulty      Int?         // 0-100 score
  intent          KeywordIntent
  priority        Int?         // Calculated priority score
  lastChecked     DateTime?    
  currentRank     Int?         // Current position in SERP
  previousRank    Int?         // Last recorded position
  ctr             Float?       // Click-through rate
  impressions     Int?         // Number of SERP impressions
  clicks          Int?         // Number of clicks from SERP
  bounceRate      Float?       // Bounce rate for this keyword's landing page
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  projectId       Int
  project         Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  groups          KeywordGroup[]
  history         KeywordHistory[]
  suggestedBy     Keyword?     @relation("RelatedKeywords", fields: [suggestedById], references: [id])
  suggestedById   Int?
  suggestions     Keyword[]    @relation("RelatedKeywords")
  competitors     CompetitorKeyword[]
  location        String?      // Geographic targeting
  device          String?      // Desktop/Mobile/Both
  notes           String?      // Custom notes
}

enum KeywordIntent {
  INFORMATIONAL
  TRANSACTIONAL
  NAVIGATIONAL
}

model KeywordHistory {
  id          Int      @id @default(autoincrement())
  keywordId   Int
  keyword     Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  rank        Int?
  ctr         Float?
  impressions Int?
  clicks      Int?
  date        DateTime @default(now())
}

model KeywordGroup {
  id        Int       @id @default(autoincrement())
  name      String
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keywords  Keyword[]
}

model Competitor {
  id        Int                 @id @default(autoincrement())
  domain    String
  projectId Int
  project   Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keywords  CompetitorKeyword[]
}

model CompetitorKeyword {
  id           Int        @id @default(autoincrement())
  competitorId Int
  competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  keywordId    Int
  keyword      Keyword    @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  rank         Int?
  updatedAt    DateTime   @updatedAt

  @@unique([competitorId, keywordId])
}
